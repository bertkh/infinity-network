{"version":3,"file":"static/js/947.c5f5f837.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__OZyB0\",\"profilePhoto\":\"ProfileInfo_profilePhoto__G8I4t\",\"infoBlock\":\"ProfileInfo_infoBlock__HVe6R\",\"contBlock\":\"ProfileInfo_contBlock__wXAzH\",\"mainPhoto\":\"ProfileInfo_mainPhoto__GL9ac\",\"contact\":\"ProfileInfo_contact__dD54C\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <b>Status</b>: <span onDoubleClick={ activateEditMode } >{ props.status || '----'}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange}\r\n                           value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, GetStringKeys, Input, Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\nimport {ProfileType} from '../../../types/types';\r\nimport {Button} from 'antd'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm:React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><Button type='primary' htmlType='submit'>save</Button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div><b>Full name</b>: { createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n        </div>\r\n\r\n        <div><b>Looking for a job</b>:\r\n            { createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n\r\n        <div><b>My professional skills</b>:\r\n            { createField<ProfileTypeKeys>('My professional skills', 'lookingForAJobDescription', [], Textarea )}\r\n        </div>\r\n\r\n        <div><b>About me</b>:\r\n            { createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n            <b>{key}: { createField(key, 'contacts.' + key, [], Input )}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm;\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport userPhoto from '../../../assets/images/ava.jpg'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport {ContactsType, ProfileType} from '../../../types/types'\r\nimport {Button, Input} from 'antd'\r\n\r\nexport type PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <div className={s.profilePhoto}>\r\n                <img src={profile.photos.large !== null\r\n                    ? profile.photos.large\r\n                    : userPhoto}\r\n                     className={s.mainPhoto}/>\r\n                {isOwner &&\r\n                    <Input type={'file'}  onChange={onMainPhotoSelected}/>\r\n                }\r\n            </div>\r\n\r\n\r\n            <div className={s.infoBlock}>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <Button onClick={goToEditMode}>edit</Button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__yjzCM\",\"posts\":\"MyPosts_posts__r45HL\"};","// extracted by mini-css-extract-plugin\nexport default {\"itemMessage\":\"Post_itemMessage__SYY4a\",\"item\":\"Post_item__l7jf-\",\"likesCount\":\"Post_likesCount__+muOf\",\"heartImg\":\"Post_heartImg__njkE5\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\nimport {PropsType} from './AddPostForm'\r\n\r\nconst HeartSvg = () => (\r\n    <svg width=\"1em\" height=\"1em\" fill=\"currentColor\" viewBox=\"0 0 1024 1024\">\r\n        <path\r\n            d=\"M923 283.6c-13.4-31.1-32.6-58.9-56.9-82.8-24.3-23.8-52.5-42.4-84-55.5-32.5-13.5-66.9-20.3-102.4-20.3-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5-24.4 23.9-43.5 51.7-56.9 82.8-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3 0.1-35.3-7-69.6-20.9-101.9z\"/>\r\n    </svg>\r\n)\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://weblinks.ru/wp-content/uploads/2021/04/3zeynnx6ija.jpg\" alt=\"\"/>\r\n            <span className={s.itemMessage}>{props.message}</span>\r\n            <span className={s.likesCount}><div className={s.heartImg}><HeartSvg/></div>{props.likesCount} likes</span>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, GetStringKeys, Input} from '../../../common/FormsControls/FormsControls';\r\nimport {required} from '../../../../utils/validators/validators';\r\nimport {Button} from 'antd'\r\n\r\nexport type PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            { createField<AddPostFormValuesTypeKeys>('Your post', 'newPostText', [required], Input) }\r\n        </div>\r\n        <div>\r\n            <Button type='primary' htmlType='submit'>\r\n                Add post\r\n            </Button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profileAddNewPostForm'})(AddPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddPostForm, {AddPostFormValuesType} from './Post/AddPostForm';\r\nimport {PostType} from '../../../types/types';\r\n\r\nexport type MapMyPostsPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchMyPostsPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\ntype PropsType = MapMyPostsPropsType & DispatchMyPostsPropsType\r\n\r\nconst MyPost: React.FC<PropsType> = props => {\r\n    const postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost} message={''} likesCount={0}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPost)\r\n\r\nexport default MyPostsMemorized\r\n","import React from 'react'\r\nimport {actions} from '../../../redux/profile-reducer'\r\nimport MyPosts, {DispatchMyPostsPropsType, MapMyPostsPropsType} from './MyPosts'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../../redux/redux-store'\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapMyPostsPropsType,\r\n    DispatchMyPostsPropsType, {}, AppStateType>\r\n(mapStateToProps,\r\n    {addPost: actions.addPostActionCreator}\r\n)(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport {PropsType} from './ProfileInfo/ProfileInfo'\r\n\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return <div>\r\n        <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner}\r\n                     saveProfile={props.saveProfile}\r\n                     profile={props.profile} status={props.status}\r\n                     updateUserStatus={props.updateUserStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from '../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\n// @ts-ignore\r\nimport {useParams, RouteComponentProps} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../hoc/withAuthRedirect';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {ProfileType} from '../../types/types';\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapsStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n            if (!userId) {\r\n                console.error('ID should exist in URI params or in state (\"authorizedUserId\")')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match && this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        } else if (!this.props.match && this.props.match !== prevProps.match) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile saveProfile={function (profile: ProfileType): Promise<any> {\r\n                throw new Error('Function not implemented.');\r\n            }} {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateUserStatus={this.props.updateUserStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport function withRouter<WCP extends object>(Children: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        const match = {params: useParams()};\r\n        return <Children {...props} match={match}/>\r\n    }\r\n}\r\n\r\n\r\n\r\nlet mapsStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapsStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);","import React, {Component} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\nlet mapsStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect <WCP extends object>(Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Navigate to='/login'/>\r\n        return <Component {...restProps as WCP} />\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapsStateToPropsForRedirect, {})(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateUserStatus","onChange","e","currentTarget","value","reduxForm","form","handleSubmit","profile","error","onSubmit","type","htmlType","className","style","createField","Input","Textarea","Object","keys","contacts","map","key","s","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","initialValues","formData","then","HeartSvg","width","height","fill","viewBox","d","alt","message","likesCount","required","MyPost","postsElements","posts","reverse","p","id","values","addPost","newPostText","React","connect","state","profilePage","actions","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","console","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","Error","withRouter","Children","useParams","compose","auth","isAuth","withAuthRedirect","mapsStateToPropsForRedirect","Component","restProps","to"],"sourceRoot":""}