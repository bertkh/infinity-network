{"version":3,"file":"static/js/468.36f4563d.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,0BCA1I,GAAgB,KAAO,yBAAyB,OAAS,4B,mBCoBzD,EAXwC,SAACA,GACrC,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAO,iBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAS,WAC7C,SAAC,KAAO,CAACC,GAAIJ,EAAMK,MAAO,CAACC,QAAS,OAAO,SAAEP,EAAMQ,QACnD,iBAAKL,UAAWC,EAAAA,KAAO,WACnB,gBAAKK,IAAI,oFAAoFC,IAAI,KAChGV,EAAMW,aAGnB,ECRA,EAJoC,SAACX,GACjC,OAAO,gBAAKG,UAAWC,EAAAA,OAAS,SAAEJ,EAAMW,SAC5C,E,uCCFMC,GAAcC,EAAAA,EAAAA,GAAiB,IAoBrC,GAAeC,EAAAA,EAAAA,GAAoC,CAAEC,KAAM,wBAA3D,EAfqG,SAACf,GAClG,OACI,kBAAMgB,SAAUhB,EAAMiB,aAAa,WAC/B,0BACMC,EAAAA,EAAAA,IAA0C,qBAAsB,iBAC9D,CAACC,EAAAA,EAAUP,GAAcQ,EAAAA,OAEjC,0BACI,SAAC,KAAM,CAACC,KAAK,UAAUC,SAAS,SAASC,OAAK,WAAC,aAK/D,ICeA,EAxBqC,SAACvB,GAElC,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAACrB,KAAMqB,EAAErB,KAAiBN,GAAI2B,EAAE3B,GAAIS,QAASkB,EAAElB,SAA3BkB,EAAE3B,GAAmC,IAC7G4B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAACrB,QAASqB,EAAErB,SAAcqB,EAAE9B,GAAK,IAMxF,OACI,iBAAKC,UAAWC,EAAAA,QAAU,WACtB,gBAAKD,UAAWC,EAAAA,aAAe,SACzBsB,KAEN,iBAAKvB,UAAWC,EAAAA,SAAW,WACvB,yBAAO0B,KACP,SAAC,EAAc,CAACd,SAXR,SAACiB,GACjBjC,EAAMkC,YAAYD,EAAOE,eAC7B,SAaJ,E,oBCxBA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KANkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE3B,IAE4B,UAAKa,EAAAA,IAC7BC,EAAAA,EAFJ,CAGEC,E,mICZEC,EAA8B,SAACjB,GAAmB,MAAM,CACxDkB,OAAQlB,EAAMmB,KAAKD,OACtB,EASM,SAASH,EAAsCK,GAWlD,OAHuCP,EAAAA,EAAAA,IACnCI,EAA6B,CAAC,EADKJ,EAP+B,SAACrC,GACpCA,EAAxB0C,OAAP,IAAkBG,GAAS,OAAI7C,EAAK,GAEpC,OAAKA,EAAM0C,QACJ,SAACE,GAAS,UAAKC,KADI,SAAC,KAAQ,CAACxC,GAAG,UAE3C,GAOJ,C","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__83XaR\",\"dialogsItems\":\"Dialogs_dialogsItems__daH76\",\"dialog\":\"Dialogs_dialog__FCbXU\",\"header\":\"Dialogs_header__Q6HOI\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogItem_item__eYEyH\",\"dialog\":\"DialogItem_dialog__9Enyi\"};","import React from 'react'\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n    message: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path} style={{padding: '8px'}}>{props.name}</NavLink>\r\n        <div className={s.item}>\r\n            <img src=\"https://olympus.crumina.net/wp-content/uploads/avatars/1/5c24a6689aa5b-bpfull.jpg\" alt=\"\"/>\r\n            {props.message}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message:React.FC<PropsType> = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message","import {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {createField, Input, Textarea} from '../../common/FormsControls/FormsControls'\r\nimport React from 'react';\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\nimport {Button} from 'antd'\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                { createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody',\r\n                    [required, maxLength50], Input)}\r\n            </div>\r\n            <div>\r\n                <Button type='primary' htmlType='submit' ghost>Send</Button>\r\n            </div>\r\n        </form>\r\n        //         {createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody', [required, maxLength50], Textarea)}\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({ form: 'dialogAddMessageForm' })(AddMessageForm);\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\nimport {InitialStateType} from '../../redux/dialogs-reducer';\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} message={d.message}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n                <AddMessageForm onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {actions} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs)","import React, {Component} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\nlet mapsStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect <WCP extends object>(Component: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Navigate to='/login'/>\r\n        return <Component {...restProps as WCP} />\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapsStateToPropsForRedirect, {})(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}"],"names":["props","path","id","className","s","to","style","padding","name","src","alt","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Input","type","htmlType","ghost","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","compose","connect","actions","withAuthRedirect","Dialogs","mapsStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}